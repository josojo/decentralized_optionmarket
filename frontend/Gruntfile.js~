module.exports = function(grunt) {
  var webpack = require("webpack");
  var webpackConfig = require("./webpack.config.js");

	var web3 = require('web3');
	if(typeof web3 !== 'undefined')
  	web3 = new Web3(web3.currentProvider);
	else
 		 // set the provider you want from Web3.providers
 		 web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));

  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),

    webpack: {
      options: webpackConfig,
      build: {
        plugins: webpackConfig.plugins.concat(
          new webpack.DefinePlugin({
            "process.env": {
              // This has effect on the react lib size
              "NODE_ENV": JSON.stringify("production")
            }
          }),
          new webpack.optimize.DedupePlugin(),
          new webpack.optimize.UglifyJsPlugin({
            mangle: {
              except: ["Array", "BigInteger", "Boolean", "Buffer", "Function", "Number", "Point", "Script"]
            }
          })
        )
      },
      "build-dev": {
        devtool: "sourcemap",
        debug: true
      }
    },
    "webpack-dev-server": {
      options: {
        webpack: webpackConfig
      },
      start: {
        keepAlive: true,
        port: 8080,
        contentBase: "app",
        hot: true,
        webpack: {
          devtool: "eval",
          debug: true,
          entry: webpackConfig.entry.concat(
            "webpack-dev-server/client?http://localhost:8080",
            "webpack/hot/dev-server"
          ),
          plugins: webpackConfig.plugins.concat(
            new webpack.HotModuleReplacementPlugin()
          )
        }
      }
    },
    watch: {
      app: {
        files: ["app/**/*.js", "app/**/*.jsx", "app/**/*.css"],
        tasks: ["webpack:build-dev"],
        options: {
          spawn: false
        }
      }
    },
    clean: ["app/*.svg", "app/*.woff", "app/*.woff2", "app/*.eot", "app/*.ttf", "app/app.js", "app/*.js.map", "app/*.jpg", "app/*.png"]
  });

  grunt.loadNpmTasks('grunt-contrib-clean');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-webpack');

  grunt.registerTask("default", ["webpack-dev-server:start"]);
  grunt.registerTask("dev", ["webpack:build-dev", "watch:app"]);
  grunt.registerTask("build", ["clean", "webpack:build"]);
  grunt.registerTask("publish", ["build"]);
};
