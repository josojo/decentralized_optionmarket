// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[],"name":"loadPrieceForMarginCall","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"loadPrice","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"overdue","outputs":[],"type":"function"}],
    binary: "60606040526101f4806100126000396000f3606060405260e060020a6000350463199213ca81146100315780635a1c03ec1461004957806387f279441461005e575b005b61002f670de0b6b3a764000034101561014b57610002565b61002f600654603c0143101561015d57610002565b61002f60035460324301111561009357600554600160a060020a0390811690600090301631606082818181858883f150505050505b565b60015460e060020a6393e5e93702606090815243606452600160a060020a0391909116906393e5e937906084906020906024816000876161da5a03f1156100025750604080516000805460e060020a6393e5e9370283524360048401529251600160a060020a03939093169450602482810193602093909290839003909101908290876161da5a03f11561000257505043600655506007805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600654603c0143101561009557610002565b60015460e060020a6393e5e93702606090815243606452600160a060020a0391909116906393e5e937906084906020906024816000876161da5a03f1156100025750604080516000805460e060020a6393e5e9370283524360048401529251600160a060020a03939093169450602482810193602093909290839003909101908290876161da5a03f115610002575050436006555056",
    unlinked_binary: "60606040526101f4806100126000396000f3606060405260e060020a6000350463199213ca81146100315780635a1c03ec1461004957806387f279441461005e575b005b61002f670de0b6b3a764000034101561014b57610002565b61002f600654603c0143101561015d57610002565b61002f60035460324301111561009357600554600160a060020a0390811690600090301631606082818181858883f150505050505b565b60015460e060020a6393e5e93702606090815243606452600160a060020a0391909116906393e5e937906084906020906024816000876161da5a03f1156100025750604080516000805460e060020a6393e5e9370283524360048401529251600160a060020a03939093169450602482810193602093909290839003909101908290876161da5a03f11561000257505043600655506007805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600654603c0143101561009557610002565b60015460e060020a6393e5e93702606090815243606452600160a060020a0391909116906393e5e937906084906020906024816000876161da5a03f1156100025750604080516000805460e060020a6393e5e9370283524360048401529251600160a060020a03939093169450602482810193602093909290839003909101908290876161da5a03f115610002575050436006555056",
    address: "",
    generated_with: "2.0.6",
    contract_name: "OptionTrade"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("OptionTrade error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("OptionTrade error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("OptionTrade error: lease call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("OptionTrade error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.OptionTrade = Contract;
  }

})();
